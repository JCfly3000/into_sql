[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "SQL handbook",
    "section": "",
    "text": "本文档提供了使用 SQL、R 和 Python 执行常见数据操作任务的综合指南。它可作为理解如何在这三种流行的数据分析工具中实现相似结果的参考。"
  },
  {
    "objectID": "index.html#选择前-6-行并重命名",
    "href": "index.html#选择前-6-行并重命名",
    "title": "SQL handbook",
    "section": "5.1 选择前 6 行并重命名",
    "text": "5.1 选择前 6 行并重命名\n本节介绍如何选择列的子集、重命名它们并限制返回的行数。\n\nSQLRPython pandasPython Polars\n\n\n\n\nCode\n-- 选择并重命名列，将结果限制为前 6 行。\nSELECT model_name as model, mpg, cyl FROM mtcars_table LIMIT 6;\n\n\n\n6 records\n\n\nmodel\nmpg\ncyl\n\n\n\n\nMazda RX4\n21.0\n6\n\n\nMazda RX4 Wag\n21.0\n6\n\n\nDatsun 710\n22.8\n4\n\n\nHornet 4 Drive\n21.4\n6\n\n\nHornet Sportabout\n18.7\n8\n\n\nValiant\n18.1\n6\n\n\n\n\n\n\n\n\n\nCode\n# 从 mtcars 数据框的前 6 行中选择并重命名列。\nhead(mtcars, 6) |&gt; select(model = model_name, mpg, cyl)\n\n\n                              model  mpg cyl\nMazda RX4                 Mazda RX4 21.0   6\nMazda RX4 Wag         Mazda RX4 Wag 21.0   6\nDatsun 710               Datsun 710 22.8   4\nHornet 4 Drive       Hornet 4 Drive 21.4   6\nHornet Sportabout Hornet Sportabout 18.7   8\nValiant                     Valiant 18.1   6\n\n\n\n\n\n\nCode\n# 重命名 mtcars 数据框中的列。\nmtcars_pd.rename(columns={'model_name': 'model'})\n\n\n                               model   mpg  cyl   disp  ...   vs   am  gear  carb\nMazda RX4                  Mazda RX4  21.0  6.0  160.0  ...  0.0  1.0   4.0   4.0\nMazda RX4 Wag          Mazda RX4 Wag  21.0  6.0  160.0  ...  0.0  1.0   4.0   4.0\nDatsun 710                Datsun 710  22.8  4.0  108.0  ...  1.0  1.0   4.0   1.0\nHornet 4 Drive        Hornet 4 Drive  21.4  6.0  258.0  ...  1.0  0.0   3.0   1.0\nHornet Sportabout  Hornet Sportabout  18.7  8.0  360.0  ...  0.0  0.0   3.0   2.0\nValiant                      Valiant  18.1  6.0  225.0  ...  1.0  0.0   3.0   1.0\nDuster 360                Duster 360  14.3  8.0  360.0  ...  0.0  0.0   3.0   4.0\nMerc 240D                  Merc 240D  24.4  4.0  146.7  ...  1.0  0.0   4.0   2.0\nMerc 230                    Merc 230  22.8  4.0  140.8  ...  1.0  0.0   4.0   2.0\nMerc 280                    Merc 280  19.2  6.0  167.6  ...  1.0  0.0   4.0   4.0\n\n[10 rows x 12 columns]\n\n\n\n\n\n\nCode\nmtcars_pl.select(pl.col(\"model_name\").alias(\"model\"), pl.col(\"mpg\"), pl.col(\"cyl\")).head(6)\n\n\n\nshape: (6, 3)\n\n\n\nmodel\nmpg\ncyl\n\n\nstr\nf64\nf64\n\n\n\n\n\"Mazda RX4\"\n21.0\n6.0\n\n\n\"Mazda RX4 Wag\"\n21.0\n6.0\n\n\n\"Datsun 710\"\n22.8\n4.0\n\n\n\"Hornet 4 Drive\"\n21.4\n6.0\n\n\n\"Hornet Sportabout\"\n18.7\n8.0\n\n\n\"Valiant\"\n18.1\n6.0"
  },
  {
    "objectID": "index.html#选择不同行",
    "href": "index.html#选择不同行",
    "title": "SQL handbook",
    "section": "5.2 选择不同行",
    "text": "5.2 选择不同行\n本节演示如何根据指定的列检索唯一的行。\n\nSQLRPython pandasPython Polars\n\n\n\n\nCode\n-- 选择 mpg 和 cyl 的不同组合。\nSELECT DISTINCT mpg, cyl FROM mtcars_table;\n\n\n\n8 records\n\n\nmpg\ncyl\n\n\n\n\n22.8\n4\n\n\n18.1\n6\n\n\n14.3\n8\n\n\n19.2\n6\n\n\n21.0\n6\n\n\n21.4\n6\n\n\n24.4\n4\n\n\n18.7\n8\n\n\n\n\n\n\n\n\n\nCode\n# 根据 mpg 和 cyl 获取不同的行。\nmtcars |&gt; distinct(mpg, cyl)\n\n\n                   mpg cyl\nMazda RX4         21.0   6\nDatsun 710        22.8   4\nHornet 4 Drive    21.4   6\nHornet Sportabout 18.7   8\nValiant           18.1   6\nDuster 360        14.3   8\nMerc 240D         24.4   4\nMerc 280          19.2   6\n\n\n\n\n\n\nCode\n# 选择特定列并删除重复行。\ndf = mtcars_pd[[\"mpg\", \"cyl\"]]\nprint(df.drop_duplicates())\n\n\n                    mpg  cyl\nMazda RX4          21.0  6.0\nDatsun 710         22.8  4.0\nHornet 4 Drive     21.4  6.0\nHornet Sportabout  18.7  8.0\nValiant            18.1  6.0\nDuster 360         14.3  8.0\nMerc 240D          24.4  4.0\nMerc 280           19.2  6.0\n\n\n\n\n\n\nCode\nmtcars_pl.select(pl.col(\"mpg\"), pl.col(\"cyl\")).unique()\n\n\n\nshape: (8, 2)\n\n\n\nmpg\ncyl\n\n\nf64\nf64\n\n\n\n\n19.2\n6.0\n\n\n22.8\n4.0\n\n\n18.1\n6.0\n\n\n18.7\n8.0\n\n\n24.4\n4.0\n\n\n21.4\n6.0\n\n\n21.0\n6.0\n\n\n14.3\n8.0"
  },
  {
    "objectID": "index.html#create-or-replace",
    "href": "index.html#create-or-replace",
    "title": "SQL handbook",
    "section": "11.1 CREATE OR REPLACE",
    "text": "11.1 CREATE OR REPLACE\n此命令创建新表或覆盖现有表。\n\n\nCode\n-- 创建一个临时表，如果它已存在则替换它。\nCREATE OR REPLACE TEMP TABLE mtcars_table_group AS\nSELECT model_name, sum(mpg) AS total_mpg, mean(cyl) AS cyl_mean FROM mtcars_table\nGROUP BY 1;"
  },
  {
    "objectID": "index.html#create-table-if-not-exists",
    "href": "index.html#create-table-if-not-exists",
    "title": "SQL handbook",
    "section": "11.2 CREATE TABLE IF NOT EXISTS",
    "text": "11.2 CREATE TABLE IF NOT EXISTS\n此命令仅在表尚不存在时创建表。\n\n\nCode\n-- 仅在尚不存在的情况下创建新表。\nCREATE TABLE IF NOT EXISTS new_mtcars_table_group AS\nSELECT model_name, sum(mpg) AS total_mpg, mean(cyl) AS cyl_mean FROM mtcars_table\nGROUP BY 1;"
  },
  {
    "objectID": "index.html#检查唯一值",
    "href": "index.html#检查唯一值",
    "title": "SQL handbook",
    "section": "12.1 检查唯一值",
    "text": "12.1 检查唯一值\n本节演示如何验证列中值的唯一性。\n\nSQLPython pandasPython Polars\n\n\n\n\nCode\n-- 计算总行数和不同 model_name 的数量。\nSELECT count(*), count(DISTINCT model_name) FROM mtcars_table;\n\n\n\n1 records\n\n\ncount_star()\ncount(DISTINCT model_name)\n\n\n\n\n10\n10\n\n\n\n\n\n\n\n\n\nCode\n# 计算总行数和不同 model_name 的数量。\nprint(len(mtcars_pd), mtcars_pd.model_name.nunique())\n\n\n10 10\n\n\n\n\n\n\nCode\n# 计算总行数和不同 model_name 的数量。\nmtcars_pl.select(pl.count(), pl.col(\"model_name\").n_unique())\n\n\n\nshape: (1, 2)\n\n\n\ncount\nmodel_name\n\n\nu32\nu32\n\n\n\n\n10\n10"
  },
  {
    "objectID": "index.html#获取重复和非重复数据",
    "href": "index.html#获取重复和非重复数据",
    "title": "SQL handbook",
    "section": "12.2 获取重复和非重复数据",
    "text": "12.2 获取重复和非重复数据\n本节演示如何根据单个列获取重复和非重复数据。\n\nSQLRPython pandasPython Polars\n\n\n\n12.2.0.1 显示所有重复项\n\n\nCode\n-- 根据 mpg 列获取重复行。\nSELECT * FROM mtcars_table WHERE mpg IN (SELECT mpg FROM mtcars_table GROUP BY mpg HAVING count(*) &gt; 1);\n\n\n\n4 records\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmodel_name\nmpg\ncyl\ndisp\nhp\ndrat\nwt\nqsec\nvs\nam\ngear\ncarb\n\n\n\n\nMazda RX4\n21.0\n6\n160.0\n110\n3.90\n2.620\n16.46\n0\n1\n4\n4\n\n\nMazda RX4 Wag\n21.0\n6\n160.0\n110\n3.90\n2.875\n17.02\n0\n1\n4\n4\n\n\nDatsun 710\n22.8\n4\n108.0\n93\n3.85\n2.320\n18.61\n1\n1\n4\n1\n\n\nMerc 230\n22.8\n4\n140.8\n95\n3.92\n3.150\n22.90\n1\n0\n4\n2\n\n\n\n\n\n保留非重复项\n\n\nCode\n-- 根据 mpg 列获取非重复行。\nSELECT * FROM mtcars_table WHERE mpg IN (SELECT mpg FROM mtcars_table GROUP BY mpg HAVING count(*) = 1);\n\n\n\n6 records\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmodel_name\nmpg\ncyl\ndisp\nhp\ndrat\nwt\nqsec\nvs\nam\ngear\ncarb\n\n\n\n\nHornet 4 Drive\n21.4\n6\n258.0\n110\n3.08\n3.215\n19.44\n1\n0\n3\n1\n\n\nHornet Sportabout\n18.7\n8\n360.0\n175\n3.15\n3.440\n17.02\n0\n0\n3\n2\n\n\nValiant\n18.1\n6\n225.0\n105\n2.76\n3.460\n20.22\n1\n0\n3\n1\n\n\nDuster 360\n14.3\n8\n360.0\n245\n3.21\n3.570\n15.84\n0\n0\n3\n4\n\n\nMerc 240D\n24.4\n4\n146.7\n62\n3.69\n3.190\n20.00\n1\n0\n4\n2\n\n\nMerc 280\n19.2\n6\n167.6\n123\n3.92\n3.440\n18.30\n1\n0\n4\n4\n\n\n\n\n\n\n\n\n\n12.2.0.2 显示所有重复项\n\n\nCode\n# 根据 mpg 列获取重复行。\nmtcars |&gt; filter(duplicated(mpg) | duplicated(mpg, fromLast = TRUE))\n\n\n                 model_name  mpg cyl  disp  hp drat    wt  qsec vs am gear carb\nMazda RX4         Mazda RX4 21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4\nMazda RX4 Wag Mazda RX4 Wag 21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4\nDatsun 710       Datsun 710 22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1\nMerc 230           Merc 230 22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2\n\n\n\n\n12.2.0.3 保留非重复项\n\n\nCode\n# 根据 mpg 列获取非重复行。\nmtcars |&gt; filter(!duplicated(mpg) & !duplicated(mpg, fromLast = TRUE))\n\n\n                         model_name  mpg cyl  disp  hp drat    wt  qsec vs am\nHornet 4 Drive       Hornet 4 Drive 21.4   6 258.0 110 3.08 3.215 19.44  1  0\nHornet Sportabout Hornet Sportabout 18.7   8 360.0 175 3.15 3.440 17.02  0  0\nValiant                     Valiant 18.1   6 225.0 105 2.76 3.460 20.22  1  0\nDuster 360               Duster 360 14.3   8 360.0 245 3.21 3.570 15.84  0  0\nMerc 240D                 Merc 240D 24.4   4 146.7  62 3.69 3.190 20.00  1  0\nMerc 280                   Merc 280 19.2   6 167.6 123 3.92 3.440 18.30  1  0\n                  gear carb\nHornet 4 Drive       3    1\nHornet Sportabout    3    2\nValiant              3    1\nDuster 360           3    4\nMerc 240D            4    2\nMerc 280             4    4\n\n\n\n\n\n\n12.2.0.4 显示所有重复项\n\n\nCode\n# 根据 mpg 列获取重复行。\nmtcars_pd[mtcars_pd.duplicated(subset=['mpg'], keep=False)]\n\n\n                  model_name   mpg  cyl   disp  ...   am  gear  carb  new_mpg\nMazda RX4          Mazda RX4  21.0  6.0  160.0  ...  1.0   4.0   4.0     22.0\nMazda RX4 Wag  Mazda RX4 Wag  21.0  6.0  160.0  ...  1.0   4.0   4.0     22.0\nDatsun 710        Datsun 710  22.8  4.0  108.0  ...  1.0   4.0   1.0     23.8\nMerc 230            Merc 230  22.8  4.0  140.8  ...  0.0   4.0   2.0     23.8\n\n[4 rows x 13 columns]\n\n\n\n\n12.2.0.5 保留非重复项\n\n\nCode\n# 根据 mpg 列获取非重复行。\nmtcars_pd[~mtcars_pd.duplicated(subset=['mpg'], keep=False)]\n\n\n                          model_name   mpg  cyl  ...  gear  carb  new_mpg\nHornet 4 Drive        Hornet 4 Drive  21.4  6.0  ...   3.0   1.0     22.4\nHornet Sportabout  Hornet Sportabout  18.7  8.0  ...   3.0   2.0     19.7\nValiant                      Valiant  18.1  6.0  ...   3.0   1.0     19.1\nDuster 360                Duster 360  14.3  8.0  ...   3.0   4.0     15.3\nMerc 240D                  Merc 240D  24.4  4.0  ...   4.0   2.0     25.4\nMerc 280                    Merc 280  19.2  6.0  ...   4.0   4.0     20.2\n\n[6 rows x 13 columns]\n\n\n\n\n\n\n\nCode\n# 根据 mpg 列获取重复行。\nmtcars_pl.filter(pl.col(\"mpg\").is_duplicated())\n\n\n\nshape: (4, 12)\n\n\n\nmodel_name\nmpg\ncyl\ndisp\nhp\ndrat\nwt\nqsec\nvs\nam\ngear\ncarb\n\n\nstr\nf64\nf64\nf64\nf64\nf64\nf64\nf64\nf64\nf64\nf64\nf64\n\n\n\n\n\"Mazda RX4\"\n21.0\n6.0\n160.0\n110.0\n3.9\n2.62\n16.46\n0.0\n1.0\n4.0\n4.0\n\n\n\"Mazda RX4 Wag\"\n21.0\n6.0\n160.0\n110.0\n3.9\n2.875\n17.02\n0.0\n1.0\n4.0\n4.0\n\n\n\"Datsun 710\"\n22.8\n4.0\n108.0\n93.0\n3.85\n2.32\n18.61\n1.0\n1.0\n4.0\n1.0\n\n\n\"Merc 230\"\n22.8\n4.0\n140.8\n95.0\n3.92\n3.15\n22.9\n1.0\n0.0\n4.0\n2.0\n\n\n\n\n\n\n\n12.2.0.6 保留非重复项\n\n\nCode\n# 根据 mpg 列获取非重复行。\nmtcars_pl.filter(pl.col(\"mpg\").is_unique())\n\n\n\nshape: (6, 12)\n\n\n\nmodel_name\nmpg\ncyl\ndisp\nhp\ndrat\nwt\nqsec\nvs\nam\ngear\ncarb\n\n\nstr\nf64\nf64\nf64\nf64\nf64\nf64\nf64\nf64\nf64\nf64\nf64\n\n\n\n\n\"Hornet 4 Drive\"\n21.4\n6.0\n258.0\n110.0\n3.08\n3.215\n19.44\n1.0\n0.0\n3.0\n1.0\n\n\n\"Hornet Sportabout\"\n18.7\n8.0\n360.0\n175.0\n3.15\n3.44\n17.02\n0.0\n0.0\n3.0\n2.0\n\n\n\"Valiant\"\n18.1\n6.0\n225.0\n105.0\n2.76\n3.46\n20.22\n1.0\n0.0\n3.0\n1.0\n\n\n\"Duster 360\"\n14.3\n8.0\n360.0\n245.0\n3.21\n3.57\n15.84\n0.0\n0.0\n3.0\n4.0\n\n\n\"Merc 240D\"\n24.4\n4.0\n146.7\n62.0\n3.69\n3.19\n20.0\n1.0\n0.0\n4.0\n2.0\n\n\n\"Merc 280\"\n19.2\n6.0\n167.6\n123.0\n3.92\n3.44\n18.3\n1.0\n0.0\n4.0\n4.0"
  },
  {
    "objectID": "index.html#左连接",
    "href": "index.html#左连接",
    "title": "SQL handbook",
    "section": "13.1 左连接",
    "text": "13.1 左连接\n本节介绍如何执行左连接以组合来自两个表的数据。\n\nSQLRPython pandasPython Polars\n\n\n\n\nCode\n-- 在 mtcars_table 和 mtcars_table_group 之间执行左连接。\nSELECT t1.model_name, t1.mpg, t1.cyl, t2.* FROM mtcars_table t1\nLEFT JOIN mtcars_table_group t2 ON t1.model_name = t2.model_name\nLIMIT 5;\n\n\n\n5 records\n\n\nmodel_name\nmpg\ncyl\nmodel_name\ntotal_mpg\ncyl_mean\n\n\n\n\nMazda RX4\n21.0\n6\nMazda RX4\n21.0\n6\n\n\nMazda RX4 Wag\n21.0\n6\nMazda RX4 Wag\n21.0\n6\n\n\nDatsun 710\n22.8\n4\nDatsun 710\n22.8\n4\n\n\nHornet 4 Drive\n21.4\n6\nHornet 4 Drive\n21.4\n6\n\n\nHornet Sportabout\n18.7\n8\nHornet Sportabout\n18.7\n8\n\n\n\n\n\n\n\n\n\nCode\n# 对 mtcars 数据框与其自身执行左连接。\nmtcars |&gt; left_join(mtcars, by = join_by(model_name == model_name)) |&gt; head(5)\n\n\n         model_name mpg.x cyl.x disp.x hp.x drat.x  wt.x qsec.x vs.x am.x\n1         Mazda RX4  21.0     6    160  110   3.90 2.620  16.46    0    1\n2     Mazda RX4 Wag  21.0     6    160  110   3.90 2.875  17.02    0    1\n3        Datsun 710  22.8     4    108   93   3.85 2.320  18.61    1    1\n4    Hornet 4 Drive  21.4     6    258  110   3.08 3.215  19.44    1    0\n5 Hornet Sportabout  18.7     8    360  175   3.15 3.440  17.02    0    0\n  gear.x carb.x mpg.y cyl.y disp.y hp.y drat.y  wt.y qsec.y vs.y am.y gear.y\n1      4      4  21.0     6    160  110   3.90 2.620  16.46    0    1      4\n2      4      4  21.0     6    160  110   3.90 2.875  17.02    0    1      4\n3      4      1  22.8     4    108   93   3.85 2.320  18.61    1    1      4\n4      3      1  21.4     6    258  110   3.08 3.215  19.44    1    0      3\n5      3      2  18.7     8    360  175   3.15 3.440  17.02    0    0      3\n  carb.y\n1      4\n2      4\n3      1\n4      1\n5      2\n\n\n\n\n\n\nCode\n# 使用 pandas 执行左连接。\npd.merge(mtcars_pd, mtcars_pd, left_on='model_name', right_on='model_name', how='left').head(5)\n\n\n          model_name  mpg_x  cyl_x  disp_x  ...  am_y  gear_y  carb_y  new_mpg_y\n0          Mazda RX4   21.0    6.0   160.0  ...   1.0     4.0     4.0       22.0\n1      Mazda RX4 Wag   21.0    6.0   160.0  ...   1.0     4.0     4.0       22.0\n2         Datsun 710   22.8    4.0   108.0  ...   1.0     4.0     1.0       23.8\n3     Hornet 4 Drive   21.4    6.0   258.0  ...   0.0     3.0     1.0       22.4\n4  Hornet Sportabout   18.7    8.0   360.0  ...   0.0     3.0     2.0       19.7\n\n[5 rows x 25 columns]\n\n\n\n\n\n\nCode\nmtcars_pl.join(mtcars_pl, on=\"model_name\", how=\"left\").head(5)\n\n\n\nshape: (5, 23)\n\n\n\nmodel_name\nmpg\ncyl\ndisp\nhp\ndrat\nwt\nqsec\nvs\nam\ngear\ncarb\nmpg_right\ncyl_right\ndisp_right\nhp_right\ndrat_right\nwt_right\nqsec_right\nvs_right\nam_right\ngear_right\ncarb_right\n\n\nstr\nf64\nf64\nf64\nf64\nf64\nf64\nf64\nf64\nf64\nf64\nf64\nf64\nf64\nf64\nf64\nf64\nf64\nf64\nf64\nf64\nf64\nf64\n\n\n\n\n\"Mazda RX4\"\n21.0\n6.0\n160.0\n110.0\n3.9\n2.62\n16.46\n0.0\n1.0\n4.0\n4.0\n21.0\n6.0\n160.0\n110.0\n3.9\n2.62\n16.46\n0.0\n1.0\n4.0\n4.0\n\n\n\"Mazda RX4 Wag\"\n21.0\n6.0\n160.0\n110.0\n3.9\n2.875\n17.02\n0.0\n1.0\n4.0\n4.0\n21.0\n6.0\n160.0\n110.0\n3.9\n2.875\n17.02\n0.0\n1.0\n4.0\n4.0\n\n\n\"Datsun 710\"\n22.8\n4.0\n108.0\n93.0\n3.85\n2.32\n18.61\n1.0\n1.0\n4.0\n1.0\n22.8\n4.0\n108.0\n93.0\n3.85\n2.32\n18.61\n1.0\n1.0\n4.0\n1.0\n\n\n\"Hornet 4 Drive\"\n21.4\n6.0\n258.0\n110.0\n3.08\n3.215\n19.44\n1.0\n0.0\n3.0\n1.0\n21.4\n6.0\n258.0\n110.0\n3.08\n3.215\n19.44\n1.0\n0.0\n3.0\n1.0\n\n\n\"Hornet Sportabout\"\n18.7\n8.0\n360.0\n175.0\n3.15\n3.44\n17.02\n0.0\n0.0\n3.0\n2.0\n18.7\n8.0\n360.0\n175.0\n3.15\n3.44\n17.02\n0.0\n0.0\n3.0\n2.0"
  },
  {
    "objectID": "index.html#内连接",
    "href": "index.html#内连接",
    "title": "SQL handbook",
    "section": "13.2 内连接",
    "text": "13.2 内连接\n本节演示如何执行内连接。\n\nSQLRPython pandasPython Polars\n\n\n\n\nCode\n-- 使用子查询执行内连接。\nSELECT t1.model_name, t1.mpg, t1.cyl, t2.* FROM mtcars_table t1\nINNER JOIN (SELECT * FROM mtcars_table_group LIMIT 5) t2 ON t1.model_name = t2.model_name;\n\n\n\n5 records\n\n\nmodel_name\nmpg\ncyl\nmodel_name\ntotal_mpg\ncyl_mean\n\n\n\n\nMazda RX4\n21.0\n6\nMazda RX4\n21.0\n6\n\n\nMazda RX4 Wag\n21.0\n6\nMazda RX4 Wag\n21.0\n6\n\n\nDatsun 710\n22.8\n4\nDatsun 710\n22.8\n4\n\n\nHornet 4 Drive\n21.4\n6\nHornet 4 Drive\n21.4\n6\n\n\nMerc 240D\n24.4\n4\nMerc 240D\n24.4\n4\n\n\n\n\n\n\n\n\n\nCode\n# 执行内连接。\nmtcars |&gt; inner_join(mtcars, by = join_by(model_name == model_name)) |&gt; head(5)\n\n\n         model_name mpg.x cyl.x disp.x hp.x drat.x  wt.x qsec.x vs.x am.x\n1         Mazda RX4  21.0     6    160  110   3.90 2.620  16.46    0    1\n2     Mazda RX4 Wag  21.0     6    160  110   3.90 2.875  17.02    0    1\n3        Datsun 710  22.8     4    108   93   3.85 2.320  18.61    1    1\n4    Hornet 4 Drive  21.4     6    258  110   3.08 3.215  19.44    1    0\n5 Hornet Sportabout  18.7     8    360  175   3.15 3.440  17.02    0    0\n  gear.x carb.x mpg.y cyl.y disp.y hp.y drat.y  wt.y qsec.y vs.y am.y gear.y\n1      4      4  21.0     6    160  110   3.90 2.620  16.46    0    1      4\n2      4      4  21.0     6    160  110   3.90 2.875  17.02    0    1      4\n3      4      1  22.8     4    108   93   3.85 2.320  18.61    1    1      4\n4      3      1  21.4     6    258  110   3.08 3.215  19.44    1    0      3\n5      3      2  18.7     8    360  175   3.15 3.440  17.02    0    0      3\n  carb.y\n1      4\n2      4\n3      1\n4      1\n5      2\n\n\n\n\n\n\nCode\n# 使用 pandas 执行内连接。\npd.merge(mtcars_pd, mtcars_pd, left_on='model_name', right_on='model_name', how='inner').head(5)\n\n\n          model_name  mpg_x  cyl_x  disp_x  ...  am_y  gear_y  carb_y  new_mpg_y\n0          Mazda RX4   21.0    6.0   160.0  ...   1.0     4.0     4.0       22.0\n1      Mazda RX4 Wag   21.0    6.0   160.0  ...   1.0     4.0     4.0       22.0\n2         Datsun 710   22.8    4.0   108.0  ...   1.0     4.0     1.0       23.8\n3     Hornet 4 Drive   21.4    6.0   258.0  ...   0.0     3.0     1.0       22.4\n4  Hornet Sportabout   18.7    8.0   360.0  ...   0.0     3.0     2.0       19.7\n\n[5 rows x 25 columns]\n\n\n\n\n\n\nCode\nmtcars_pl.join(mtcars_pl, on=\"model_name\", how=\"inner\").head(5)\n\n\n\nshape: (5, 23)\n\n\n\nmodel_name\nmpg\ncyl\ndisp\nhp\ndrat\nwt\nqsec\nvs\nam\ngear\ncarb\nmpg_right\ncyl_right\ndisp_right\nhp_right\ndrat_right\nwt_right\nqsec_right\nvs_right\nam_right\ngear_right\ncarb_right\n\n\nstr\nf64\nf64\nf64\nf64\nf64\nf64\nf64\nf64\nf64\nf64\nf64\nf64\nf64\nf64\nf64\nf64\nf64\nf64\nf64\nf64\nf64\nf64\n\n\n\n\n\"Mazda RX4\"\n21.0\n6.0\n160.0\n110.0\n3.9\n2.62\n16.46\n0.0\n1.0\n4.0\n4.0\n21.0\n6.0\n160.0\n110.0\n3.9\n2.62\n16.46\n0.0\n1.0\n4.0\n4.0\n\n\n\"Mazda RX4 Wag\"\n21.0\n6.0\n160.0\n110.0\n3.9\n2.875\n17.02\n0.0\n1.0\n4.0\n4.0\n21.0\n6.0\n160.0\n110.0\n3.9\n2.875\n17.02\n0.0\n1.0\n4.0\n4.0\n\n\n\"Datsun 710\"\n22.8\n4.0\n108.0\n93.0\n3.85\n2.32\n18.61\n1.0\n1.0\n4.0\n1.0\n22.8\n4.0\n108.0\n93.0\n3.85\n2.32\n18.61\n1.0\n1.0\n4.0\n1.0\n\n\n\"Hornet 4 Drive\"\n21.4\n6.0\n258.0\n110.0\n3.08\n3.215\n19.44\n1.0\n0.0\n3.0\n1.0\n21.4\n6.0\n258.0\n110.0\n3.08\n3.215\n19.44\n1.0\n0.0\n3.0\n1.0\n\n\n\"Hornet Sportabout\"\n18.7\n8.0\n360.0\n175.0\n3.15\n3.44\n17.02\n0.0\n0.0\n3.0\n2.0\n18.7\n8.0\n360.0\n175.0\n3.15\n3.44\n17.02\n0.0\n0.0\n3.0\n2.0"
  },
  {
    "objectID": "index.html#追加时不消除重复项-union-all",
    "href": "index.html#追加时不消除重复项-union-all",
    "title": "SQL handbook",
    "section": "14.1 追加时不消除重复项 (union all)",
    "text": "14.1 追加时不消除重复项 (union all)\n本节介绍如何组合来自两个表的行，并保留所有重复项。\n\nSQLRPython pandas\n\n\n\n\nCode\n-- 计算原始表中的行数。\nSELECT count(*) FROM mtcars_table;\n\n\n\n1 records\n\n\ncount_star()\n\n\n\n\n10\n\n\n\n\n\n\n\nCode\n-- 通过将 mtcars_table 追加到自身（包括重复项）来创建新表。\nCREATE TEMP TABLE double_mtcars_table AS\nSELECT * FROM mtcars_table\nUNION ALL\nSELECT * FROM mtcars_table;\n\n\n\n\nCode\n-- 计算新表中的行数。\nSELECT count(*) FROM double_mtcars_table;\n\n\n\n1 records\n\n\ncount_star()\n\n\n\n\n20\n\n\n\n\n\n\n\n\n\nCode\n# 使用 bind_rows 追加行。\nmtcars %&gt;% bind_rows(mtcars)\n\n\n                              model_name  mpg cyl  disp  hp drat    wt  qsec vs\nMazda RX4...1                  Mazda RX4 21.0   6 160.0 110 3.90 2.620 16.46  0\nMazda RX4 Wag...2          Mazda RX4 Wag 21.0   6 160.0 110 3.90 2.875 17.02  0\nDatsun 710...3                Datsun 710 22.8   4 108.0  93 3.85 2.320 18.61  1\nHornet 4 Drive...4        Hornet 4 Drive 21.4   6 258.0 110 3.08 3.215 19.44  1\nHornet Sportabout...5  Hornet Sportabout 18.7   8 360.0 175 3.15 3.440 17.02  0\nValiant...6                      Valiant 18.1   6 225.0 105 2.76 3.460 20.22  1\nDuster 360...7                Duster 360 14.3   8 360.0 245 3.21 3.570 15.84  0\nMerc 240D...8                  Merc 240D 24.4   4 146.7  62 3.69 3.190 20.00  1\nMerc 230...9                    Merc 230 22.8   4 140.8  95 3.92 3.150 22.90  1\nMerc 280...10                   Merc 280 19.2   6 167.6 123 3.92 3.440 18.30  1\nMazda RX4...11                 Mazda RX4 21.0   6 160.0 110 3.90 2.620 16.46  0\nMazda RX4 Wag...12         Mazda RX4 Wag 21.0   6 160.0 110 3.90 2.875 17.02  0\nDatsun 710...13               Datsun 710 22.8   4 108.0  93 3.85 2.320 18.61  1\nHornet 4 Drive...14       Hornet 4 Drive 21.4   6 258.0 110 3.08 3.215 19.44  1\nHornet Sportabout...15 Hornet Sportabout 18.7   8 360.0 175 3.15 3.440 17.02  0\nValiant...16                     Valiant 18.1   6 225.0 105 2.76 3.460 20.22  1\nDuster 360...17               Duster 360 14.3   8 360.0 245 3.21 3.570 15.84  0\nMerc 240D...18                 Merc 240D 24.4   4 146.7  62 3.69 3.190 20.00  1\nMerc 230...19                   Merc 230 22.8   4 140.8  95 3.92 3.150 22.90  1\nMerc 280...20                   Merc 280 19.2   6 167.6 123 3.92 3.440 18.30  1\n                       am gear carb\nMazda RX4...1           1    4    4\nMazda RX4 Wag...2       1    4    4\nDatsun 710...3          1    4    1\nHornet 4 Drive...4      0    3    1\nHornet Sportabout...5   0    3    2\nValiant...6             0    3    1\nDuster 360...7          0    3    4\nMerc 240D...8           0    4    2\nMerc 230...9            0    4    2\nMerc 280...10           0    4    4\nMazda RX4...11          1    4    4\nMazda RX4 Wag...12      1    4    4\nDatsun 710...13         1    4    1\nHornet 4 Drive...14     0    3    1\nHornet Sportabout...15  0    3    2\nValiant...16            0    3    1\nDuster 360...17         0    3    4\nMerc 240D...18          0    4    2\nMerc 230...19           0    4    2\nMerc 280...20           0    4    4\n\n\n\n\n\n\nCode\n# 连接数据框，保留所有行。\npd.concat([mtcars_pd, mtcars_pd], ignore_index=True)\n\n\n           model_name   mpg  cyl   disp     hp  ...   vs   am  gear  carb  new_mpg\n0           Mazda RX4  21.0  6.0  160.0  110.0  ...  0.0  1.0   4.0   4.0     22.0\n1       Mazda RX4 Wag  21.0  6.0  160.0  110.0  ...  0.0  1.0   4.0   4.0     22.0\n2          Datsun 710  22.8  4.0  108.0   93.0  ...  1.0  1.0   4.0   1.0     23.8\n3      Hornet 4 Drive  21.4  6.0  258.0  110.0  ...  1.0  0.0   3.0   1.0     22.4\n4   Hornet Sportabout  18.7  8.0  360.0  175.0  ...  0.0  0.0   3.0   2.0     19.7\n5             Valiant  18.1  6.0  225.0  105.0  ...  1.0  0.0   3.0   1.0     19.1\n6          Duster 360  14.3  8.0  360.0  245.0  ...  0.0  0.0   3.0   4.0     15.3\n7           Merc 240D  24.4  4.0  146.7   62.0  ...  1.0  0.0   4.0   2.0     25.4\n8            Merc 230  22.8  4.0  140.8   95.0  ...  1.0  0.0   4.0   2.0     23.8\n9            Merc 280  19.2  6.0  167.6  123.0  ...  1.0  0.0   4.0   4.0     20.2\n10          Mazda RX4  21.0  6.0  160.0  110.0  ...  0.0  1.0   4.0   4.0     22.0\n11      Mazda RX4 Wag  21.0  6.0  160.0  110.0  ...  0.0  1.0   4.0   4.0     22.0\n12         Datsun 710  22.8  4.0  108.0   93.0  ...  1.0  1.0   4.0   1.0     23.8\n13     Hornet 4 Drive  21.4  6.0  258.0  110.0  ...  1.0  0.0   3.0   1.0     22.4\n14  Hornet Sportabout  18.7  8.0  360.0  175.0  ...  0.0  0.0   3.0   2.0     19.7\n15            Valiant  18.1  6.0  225.0  105.0  ...  1.0  0.0   3.0   1.0     19.1\n16         Duster 360  14.3  8.0  360.0  245.0  ...  0.0  0.0   3.0   4.0     15.3\n17          Merc 240D  24.4  4.0  146.7   62.0  ...  1.0  0.0   4.0   2.0     25.4\n18           Merc 230  22.8  4.0  140.8   95.0  ...  1.0  0.0   4.0   2.0     23.8\n19           Merc 280  19.2  6.0  167.6  123.0  ...  1.0  0.0   4.0   4.0     20.2\n\n[20 rows x 13 columns]"
  },
  {
    "objectID": "index.html#追加时消除重复项-union",
    "href": "index.html#追加时消除重复项-union",
    "title": "SQL handbook",
    "section": "14.2 追加时消除重复项 (union)",
    "text": "14.2 追加时消除重复项 (union)\n本节演示如何在组合行时删除重复条目。\n\nSQLRPython pandas\n\n\n\n\nCode\n-- 创建一个表，删除重复行。\nCREATE OR REPLACE TEMP TABLE double_mtcars_table AS\nSELECT * FROM mtcars_table\nUNION\nSELECT * FROM mtcars_table;\n\n\n\n\nCode\n-- 计算新表中的行数。\nSELECT count(*) FROM double_mtcars_table;\n\n\n\n1 records\n\n\ncount_star()\n\n\n\n\n10\n\n\n\n\n\n\n\nCode\n-- 验证不同行的计数。\nSELECT count(*) FROM (\n  SELECT DISTINCT * FROM double_mtcars_table\n);\n\n\n\n1 records\n\n\ncount_star()\n\n\n\n\n10\n\n\n\n\n\n\n\n\n\nCode\n# 追加行然后删除重复项。\nmtcars %&gt;% bind_rows(mtcars) |&gt; distinct()\n\n\n                         model_name  mpg cyl  disp  hp drat    wt  qsec vs am\nMazda RX4                 Mazda RX4 21.0   6 160.0 110 3.90 2.620 16.46  0  1\nMazda RX4 Wag         Mazda RX4 Wag 21.0   6 160.0 110 3.90 2.875 17.02  0  1\nDatsun 710               Datsun 710 22.8   4 108.0  93 3.85 2.320 18.61  1  1\nHornet 4 Drive       Hornet 4 Drive 21.4   6 258.0 110 3.08 3.215 19.44  1  0\nHornet Sportabout Hornet Sportabout 18.7   8 360.0 175 3.15 3.440 17.02  0  0\nValiant                     Valiant 18.1   6 225.0 105 2.76 3.460 20.22  1  0\nDuster 360               Duster 360 14.3   8 360.0 245 3.21 3.570 15.84  0  0\nMerc 240D                 Merc 240D 24.4   4 146.7  62 3.69 3.190 20.00  1  0\nMerc 230                   Merc 230 22.8   4 140.8  95 3.92 3.150 22.90  1  0\nMerc 280                   Merc 280 19.2   6 167.6 123 3.92 3.440 18.30  1  0\n                  gear carb\nMazda RX4            4    4\nMazda RX4 Wag        4    4\nDatsun 710           4    1\nHornet 4 Drive       3    1\nHornet Sportabout    3    2\nValiant              3    1\nDuster 360           3    4\nMerc 240D            4    2\nMerc 230             4    2\nMerc 280             4    4\n\n\n\n\n\n\nCode\n# 连接数据框然后删除重复项。\npd.concat([mtcars_pd, mtcars_pd], ignore_index=True).drop_duplicates()\n\n\n          model_name   mpg  cyl   disp     hp  ...   vs   am  gear  carb  new_mpg\n0          Mazda RX4  21.0  6.0  160.0  110.0  ...  0.0  1.0   4.0   4.0     22.0\n1      Mazda RX4 Wag  21.0  6.0  160.0  110.0  ...  0.0  1.0   4.0   4.0     22.0\n2         Datsun 710  22.8  4.0  108.0   93.0  ...  1.0  1.0   4.0   1.0     23.8\n3     Hornet 4 Drive  21.4  6.0  258.0  110.0  ...  1.0  0.0   3.0   1.0     22.4\n4  Hornet Sportabout  18.7  8.0  360.0  175.0  ...  0.0  0.0   3.0   2.0     19.7\n5            Valiant  18.1  6.0  225.0  105.0  ...  1.0  0.0   3.0   1.0     19.1\n6         Duster 360  14.3  8.0  360.0  245.0  ...  0.0  0.0   3.0   4.0     15.3\n7          Merc 240D  24.4  4.0  146.7   62.0  ...  1.0  0.0   4.0   2.0     25.4\n8           Merc 230  22.8  4.0  140.8   95.0  ...  1.0  0.0   4.0   2.0     23.8\n9           Merc 280  19.2  6.0  167.6  123.0  ...  1.0  0.0   4.0   4.0     20.2\n\n[10 rows x 13 columns]"
  },
  {
    "objectID": "index.html#对一列进行透视",
    "href": "index.html#对一列进行透视",
    "title": "SQL handbook",
    "section": "18.1 对一列进行透视",
    "text": "18.1 对一列进行透视\n\nSQLPython pandasPython Polars\n\n\n\n\nCode\n-- 对 'year' 列进行透视。\nPIVOT cities\nON year\nUSING sum(population)\nGROUP BY country;\n\n\n\n2 records\n\n\ncountry\n2000\n2010\n2020\n\n\n\n\nNL\n1005\n1065\n1158\n\n\nUS\n8579\n8783\n9510\n\n\n\n\n\n\n\n\n\nCode\ncities_pd.pivot_table(index='country', columns='year', values='population', aggfunc='sum').reset_index()\n\n\nyear country  2000  2010  2020\n0         NL  1005  1065  1158\n1         US  8579  8783  9510\n\n\n\n\n\n\nCode\ncities_pl.pivot(index='country', columns='year', values='population', aggregate_function='sum')\n\n\n\nshape: (2, 4)\n\n\n\ncountry\n2000\n2010\n2020\n\n\nstr\ni64\ni64\ni64\n\n\n\n\n\"NL\"\n1005\n1065\n1158\n\n\n\"US\"\n8579\n8783\n9510"
  },
  {
    "objectID": "index.html#对两列进行透视",
    "href": "index.html#对两列进行透视",
    "title": "SQL handbook",
    "section": "18.2 对两列进行透视",
    "text": "18.2 对两列进行透视\n\nSQLPython pandasPython Polars\n\n\n\n\nCode\n-- 对 'country' 和 'name' 进行透视。\nPIVOT cities\nON country, name\nUSING sum(population);\n\n\n\n3 records\n\n\n\n\n\n\n\n\n\n\n\nyear\nNL_Amsterdam\nNL_New York City\nNL_Seattle\nUS_Amsterdam\nUS_New York City\nUS_Seattle\n\n\n\n\n2000\n1005\nNA\nNA\nNA\n8015\n564\n\n\n2010\n1065\nNA\nNA\nNA\n8175\n608\n\n\n2020\n1158\nNA\nNA\nNA\n8772\n738\n\n\n\n\n\n\n\n\n\nCode\ncities_pd.pivot_table(index=['country', 'name'], columns='year', values='population', aggfunc='sum').reset_index()\n\n\nyear country           name  2000  2010  2020\n0         NL      Amsterdam  1005  1065  1158\n1         US  New York City  8015  8175  8772\n2         US        Seattle   564   608   738\n\n\n\n\n\n\nCode\ncities_pl.pivot(index=['country', 'name'], columns='year', values='population', aggregate_function='sum')\n\n\n\nshape: (3, 5)\n\n\n\ncountry\nname\n2000\n2010\n2020\n\n\nstr\nstr\ni64\ni64\ni64\n\n\n\n\n\"NL\"\n\"Amsterdam\"\n1005\n1065\n1158\n\n\n\"US\"\n\"Seattle\"\n564\n608\n738\n\n\n\"US\"\n\"New York City\"\n8015\n8175\n8772"
  }
]