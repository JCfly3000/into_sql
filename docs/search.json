[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "SQL handbook",
    "section": "",
    "text": "This document provides a comprehensive guide to performing common data manipulation tasks using SQL, R, and Python. It serves as a reference for understanding how to achieve similar outcomes across these three popular data analysis tools."
  },
  {
    "objectID": "index.html#environment-setup",
    "href": "index.html#environment-setup",
    "title": "SQL handbook",
    "section": "1.1 Environment Setup",
    "text": "1.1 Environment Setup\nThe first step is to set up the environment by loading the necessary libraries and configuring the connection between R and Python.\n\n\nCode\n# Load the reticulate library to enable interoperability between R and Python.\nlibrary(reticulate)\n# Display the Python configuration to ensure the correct version is being used.\npy_config()\n\n\npython:         /Users/jinchaoduan/.cache/uv/archive-v0/uSMUkHzA-pLqYxZe5zVrj/bin/python3\nlibpython:      /Users/jinchaoduan/.local/share/uv/python/cpython-3.11.11-macos-aarch64-none/lib/libpython3.11.dylib\npythonhome:     /Users/jinchaoduan/.cache/uv/archive-v0/uSMUkHzA-pLqYxZe5zVrj:/Users/jinchaoduan/.cache/uv/archive-v0/uSMUkHzA-pLqYxZe5zVrj\nvirtualenv:     /Users/jinchaoduan/.cache/uv/archive-v0/uSMUkHzA-pLqYxZe5zVrj/bin/activate_this.py\nversion:        3.11.11 (main, Mar 11 2025, 17:41:13) [Clang 20.1.0 ]\nnumpy:          /Users/jinchaoduan/.cache/uv/archive-v0/uSMUkHzA-pLqYxZe5zVrj/lib/python3.11/site-packages/numpy\nnumpy_version:  2.3.1\n\nNOTE: Python version was forced by py_require()\n\n\nCode\n# The following lines are commented out but can be used to install Python packages if needed.\n# py_install(\"pandas\")\n# py_install(\"Great-Tables\")\n# py_install(\"polars\")\n\npy_require(c(\"pandas\",\"Great-Tables\",\"polars\",\"pyarrow\"))\n\n\n\n\nCode\n# The following lines are commented out but demonstrate how to specify a particular Python version for reticulate.\n# Sys.setenv(RETICULATE_PYTHON = \"/Library/Frameworks/Python.framework/Versions/3.11/bin/python3.11\")\n# library(reticulate)\n# use_python(\"/Library/Frameworks/Python.framework/Versions/3.11/bin/python3.11\")\n\n\n\n\nCode\n# Import the python_version function and print the current Python version to confirm the setup.\nfrom platform import python_version\nprint(python_version())\n\n\n3.11.11\n\n\nThe following commands are intended for command-line execution to manage Python packages. They are not executed within this document.\npip install --upgrade polars\n\n\nCode\n# Import the pandas library for data manipulation in Python and the os library for interacting with the operating system.\nimport pandas as pd\nimport polars as pl\nimport os"
  },
  {
    "objectID": "index.html#data-loading",
    "href": "index.html#data-loading",
    "title": "SQL handbook",
    "section": "1.2 Data Loading",
    "text": "1.2 Data Loading\nThis section covers loading the required R libraries and preparing the datasets that will be used throughout the document.\n\n\nCode\n# Load libraries for database interaction, data manipulation, and connections.\nlibrary(DBI)\nlibrary(tidyverse)\nlibrary(RSQLite)\nlibrary(connections)\nlibrary(duckdb)\n\n\n\n\nCode\n# Prepare the R dataframes.\n# Remove the existing mtcars dataset if it exists.\nrm(mtcars)\n# Create the mtcars dataframe from the base R dataset, adding the row names as a new column.\nmtcars = cbind(model_name = rownames(mtcars), mtcars) |&gt; head(10)\n# Create the iris dataframe from the base R dataset.\niris = iris |&gt; head(10)\n\n\n\n\nCode\nimport pandas as pd\ncities_pd = pd.DataFrame({\n    'country': ['NL', 'NL', 'NL', 'US', 'US', 'US', 'US', 'US', 'US'],\n    'name': ['Amsterdam', 'Amsterdam', 'Amsterdam', 'Seattle', 'Seattle', 'Seattle', 'New York City', 'New York City', 'New York City'],\n    'year': [2000, 2010, 2020, 2000, 2010, 2020, 2000, 2010, 2020],\n    'population': [1005, 1065, 1158, 564, 608, 738, 8015, 8175, 8772]\n})\n\n\n\n\nCode\n# Make the R dataframes available in the Python environment.\nmtcars_pd = r.mtcars\niris_pd = r.iris\nmtcars_pl = pl.from_pandas(mtcars_pd)\niris_pl = pl.from_pandas(iris_pd)\ncities_pl=pl.from_pandas(cities_pd)"
  },
  {
    "objectID": "index.html#database-connection",
    "href": "index.html#database-connection",
    "title": "SQL handbook",
    "section": "1.3 Database Connection",
    "text": "1.3 Database Connection\nHere, we establish a connection to a DuckDB database and write the prepared dataframes into it.\n\n\nCode\n# Remove the database file if it already exists to start with a clean slate.\nif (file.exists(\"my-db.duckdb\")) {\n  file.remove(\"my-db.duckdb\")\n}\n# Establish a connection to the DuckDB database.\ncon &lt;- dbConnect(duckdb(), dbdir = \"my-db.duckdb\", read_only = FALSE)\n# Write the iris and mtcars dataframes to the database as tables.\ndbWriteTable(con, \"iris_table\", iris, overwrite = TRUE)\ndbWriteTable(con, \"mtcars_table\", mtcars, overwrite = TRUE)\n\n\n\nThere are tables iris_table and mtcars_table in the DuckDB database my-db.duckdb.\nThere are dataframes iris and mtcars in the R environment.\nThere are dataframes iris and mtcars in the Python environment."
  },
  {
    "objectID": "index.html#select-top-6-and-rename",
    "href": "index.html#select-top-6-and-rename",
    "title": "SQL handbook",
    "section": "5.1 Select Top 6 and Rename",
    "text": "5.1 Select Top 6 and Rename\nThis section shows how to select a subset of columns, rename them, and limit the number of rows returned.\n\nSQLRPython pandasPython Polars\n\n\n\n\nCode\n-- Select and rename columns, limiting the result to the top 6 rows.\nSELECT model_name as model, mpg, cyl FROM mtcars_table LIMIT 6;\n\n\n\n6 records\n\n\nmodel\nmpg\ncyl\n\n\n\n\nMazda RX4\n21.0\n6\n\n\nMazda RX4 Wag\n21.0\n6\n\n\nDatsun 710\n22.8\n4\n\n\nHornet 4 Drive\n21.4\n6\n\n\nHornet Sportabout\n18.7\n8\n\n\nValiant\n18.1\n6\n\n\n\n\n\n\n\n\n\nCode\n# Select and rename columns from the first 6 rows of the mtcars dataframe.\nhead(mtcars, 6) |&gt; select(model = model_name, mpg, cyl)\n\n\n                              model  mpg cyl\nMazda RX4                 Mazda RX4 21.0   6\nMazda RX4 Wag         Mazda RX4 Wag 21.0   6\nDatsun 710               Datsun 710 22.8   4\nHornet 4 Drive       Hornet 4 Drive 21.4   6\nHornet Sportabout Hornet Sportabout 18.7   8\nValiant                     Valiant 18.1   6\n\n\n\n\n\n\nCode\n# Rename a column in the mtcars dataframe.\nmtcars_pd.rename(columns={'model_name': 'model'})\n\n\n                               model   mpg  cyl   disp  ...   vs   am  gear  carb\nMazda RX4                  Mazda RX4  21.0  6.0  160.0  ...  0.0  1.0   4.0   4.0\nMazda RX4 Wag          Mazda RX4 Wag  21.0  6.0  160.0  ...  0.0  1.0   4.0   4.0\nDatsun 710                Datsun 710  22.8  4.0  108.0  ...  1.0  1.0   4.0   1.0\nHornet 4 Drive        Hornet 4 Drive  21.4  6.0  258.0  ...  1.0  0.0   3.0   1.0\nHornet Sportabout  Hornet Sportabout  18.7  8.0  360.0  ...  0.0  0.0   3.0   2.0\nValiant                      Valiant  18.1  6.0  225.0  ...  1.0  0.0   3.0   1.0\nDuster 360                Duster 360  14.3  8.0  360.0  ...  0.0  0.0   3.0   4.0\nMerc 240D                  Merc 240D  24.4  4.0  146.7  ...  1.0  0.0   4.0   2.0\nMerc 230                    Merc 230  22.8  4.0  140.8  ...  1.0  0.0   4.0   2.0\nMerc 280                    Merc 280  19.2  6.0  167.6  ...  1.0  0.0   4.0   4.0\n\n[10 rows x 12 columns]\n\n\n\n\n\n\nCode\nmtcars_pl.select(pl.col(\"model_name\").alias(\"model\"), pl.col(\"mpg\"), pl.col(\"cyl\")).head(6)\n\n\n\nshape: (6, 3)\n\n\n\nmodel\nmpg\ncyl\n\n\nstr\nf64\nf64\n\n\n\n\n\"Mazda RX4\"\n21.0\n6.0\n\n\n\"Mazda RX4 Wag\"\n21.0\n6.0\n\n\n\"Datsun 710\"\n22.8\n4.0\n\n\n\"Hornet 4 Drive\"\n21.4\n6.0\n\n\n\"Hornet Sportabout\"\n18.7\n8.0\n\n\n\"Valiant\"\n18.1\n6.0"
  },
  {
    "objectID": "index.html#select-distinct",
    "href": "index.html#select-distinct",
    "title": "SQL handbook",
    "section": "5.2 Select Distinct",
    "text": "5.2 Select Distinct\nThis section demonstrates how to retrieve unique rows based on specified columns.\n\nSQLRPython pandasPython Polars\n\n\n\n\nCode\n-- Select distinct combinations of mpg and cyl.\nSELECT DISTINCT mpg, cyl FROM mtcars_table;\n\n\n\n8 records\n\n\nmpg\ncyl\n\n\n\n\n18.7\n8\n\n\n19.2\n6\n\n\n22.8\n4\n\n\n18.1\n6\n\n\n14.3\n8\n\n\n21.0\n6\n\n\n21.4\n6\n\n\n24.4\n4\n\n\n\n\n\n\n\n\n\nCode\n# Get distinct rows based on mpg and cyl.\nmtcars |&gt; distinct(mpg, cyl)\n\n\n                   mpg cyl\nMazda RX4         21.0   6\nDatsun 710        22.8   4\nHornet 4 Drive    21.4   6\nHornet Sportabout 18.7   8\nValiant           18.1   6\nDuster 360        14.3   8\nMerc 240D         24.4   4\nMerc 280          19.2   6\n\n\n\n\n\n\nCode\n# Select specific columns and drop duplicate rows.\ndf = mtcars_pd[[\"mpg\", \"cyl\"]]\nprint(df.drop_duplicates())\n\n\n                    mpg  cyl\nMazda RX4          21.0  6.0\nDatsun 710         22.8  4.0\nHornet 4 Drive     21.4  6.0\nHornet Sportabout  18.7  8.0\nValiant            18.1  6.0\nDuster 360         14.3  8.0\nMerc 240D          24.4  4.0\nMerc 280           19.2  6.0\n\n\n\n\n\n\nCode\nmtcars_pl.select(pl.col(\"mpg\"), pl.col(\"cyl\")).unique()\n\n\n\nshape: (8, 2)\n\n\n\nmpg\ncyl\n\n\nf64\nf64\n\n\n\n\n18.7\n8.0\n\n\n21.0\n6.0\n\n\n18.1\n6.0\n\n\n22.8\n4.0\n\n\n21.4\n6.0\n\n\n24.4\n4.0\n\n\n19.2\n6.0\n\n\n14.3\n8.0"
  },
  {
    "objectID": "index.html#create-or-replace",
    "href": "index.html#create-or-replace",
    "title": "SQL handbook",
    "section": "11.1 CREATE OR REPLACE",
    "text": "11.1 CREATE OR REPLACE\nThis command creates a new table or overwrites an existing one.\n\n\nCode\n-- Create a temporary table, replacing it if it already exists.\nCREATE OR REPLACE TEMP TABLE mtcars_table_group AS\nSELECT model_name, sum(mpg) AS total_mpg, mean(cyl) AS cyl_mean FROM mtcars_table\nGROUP BY 1;"
  },
  {
    "objectID": "index.html#create-table-if-not-exists",
    "href": "index.html#create-table-if-not-exists",
    "title": "SQL handbook",
    "section": "11.2 CREATE TABLE IF NOT EXISTS",
    "text": "11.2 CREATE TABLE IF NOT EXISTS\nThis command creates a table only if it does not already exist.\n\n\nCode\n-- Create a new table only if it does not already exist.\nCREATE TABLE IF NOT EXISTS new_mtcars_table_group AS\nSELECT model_name, sum(mpg) AS total_mpg, mean(cyl) AS cyl_mean FROM mtcars_table\nGROUP BY 1;"
  },
  {
    "objectID": "index.html#check-unique",
    "href": "index.html#check-unique",
    "title": "SQL handbook",
    "section": "12.1 Check Unique",
    "text": "12.1 Check Unique\nThis section demonstrates how to verify the uniqueness of values in a column.\n\nSQLPython pandasPython Polars\n\n\n\n\nCode\n-- Count the total number of rows and the number of distinct model names.\nSELECT count(*), count(DISTINCT model_name) FROM mtcars_table;\n\n\n\n1 records\n\n\ncount_star()\ncount(DISTINCT model_name)\n\n\n\n\n10\n10\n\n\n\n\n\n\n\n\n\nCode\n# Count the total number of rows and the number of distinct model names.\nprint(len(mtcars_pd), mtcars_pd.model_name.nunique())\n\n\n10 10\n\n\n\n\n\n\nCode\n# Count the total number of rows and the number of distinct model names.\nmtcars_pl.select(pl.count(), pl.col(\"model_name\").n_unique())\n\n\n\nshape: (1, 2)\n\n\n\ncount\nmodel_name\n\n\nu32\nu32\n\n\n\n\n10\n10"
  },
  {
    "objectID": "index.html#get-duplicate-and-non-duplicate-data",
    "href": "index.html#get-duplicate-and-non-duplicate-data",
    "title": "SQL handbook",
    "section": "12.2 Get Duplicate and Non-Duplicate Data",
    "text": "12.2 Get Duplicate and Non-Duplicate Data\nThis section demonstrates how to get duplicate and non-duplicate data based on a single column.\n\nSQLRPython pandasPython Polars\n\n\n\n12.2.0.1 Show all Duplicate\n\n\nCode\n-- Get duplicate rows based on the mpg column.\nSELECT * FROM mtcars_table WHERE mpg IN (SELECT mpg FROM mtcars_table GROUP BY mpg HAVING count(*) &gt; 1);\n\n\n\n4 records\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmodel_name\nmpg\ncyl\ndisp\nhp\ndrat\nwt\nqsec\nvs\nam\ngear\ncarb\n\n\n\n\nMazda RX4\n21.0\n6\n160.0\n110\n3.90\n2.620\n16.46\n0\n1\n4\n4\n\n\nMazda RX4 Wag\n21.0\n6\n160.0\n110\n3.90\n2.875\n17.02\n0\n1\n4\n4\n\n\nDatsun 710\n22.8\n4\n108.0\n93\n3.85\n2.320\n18.61\n1\n1\n4\n1\n\n\nMerc 230\n22.8\n4\n140.8\n95\n3.92\n3.150\n22.90\n1\n0\n4\n2\n\n\n\n\n\nkeep non Duplicate\n\n\nCode\n-- Get non-duplicate rows based on the mpg column.\nSELECT * FROM mtcars_table WHERE mpg IN (SELECT mpg FROM mtcars_table GROUP BY mpg HAVING count(*) = 1);\n\n\n\n6 records\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmodel_name\nmpg\ncyl\ndisp\nhp\ndrat\nwt\nqsec\nvs\nam\ngear\ncarb\n\n\n\n\nHornet 4 Drive\n21.4\n6\n258.0\n110\n3.08\n3.215\n19.44\n1\n0\n3\n1\n\n\nHornet Sportabout\n18.7\n8\n360.0\n175\n3.15\n3.440\n17.02\n0\n0\n3\n2\n\n\nValiant\n18.1\n6\n225.0\n105\n2.76\n3.460\n20.22\n1\n0\n3\n1\n\n\nDuster 360\n14.3\n8\n360.0\n245\n3.21\n3.570\n15.84\n0\n0\n3\n4\n\n\nMerc 240D\n24.4\n4\n146.7\n62\n3.69\n3.190\n20.00\n1\n0\n4\n2\n\n\nMerc 280\n19.2\n6\n167.6\n123\n3.92\n3.440\n18.30\n1\n0\n4\n4\n\n\n\n\n\n\n\n\n\n12.2.0.2 Show all Duplicate\n\n\nCode\n# Get duplicate rows based on the mpg column.\nmtcars |&gt; filter(duplicated(mpg) | duplicated(mpg, fromLast = TRUE))\n\n\n                 model_name  mpg cyl  disp  hp drat    wt  qsec vs am gear carb\nMazda RX4         Mazda RX4 21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4\nMazda RX4 Wag Mazda RX4 Wag 21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4\nDatsun 710       Datsun 710 22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1\nMerc 230           Merc 230 22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2\n\n\n\n\n12.2.0.3 keep non Duplicate\n\n\nCode\n# Get non-duplicate rows based on the mpg column.\nmtcars |&gt; filter(!duplicated(mpg) & !duplicated(mpg, fromLast = TRUE))\n\n\n                         model_name  mpg cyl  disp  hp drat    wt  qsec vs am\nHornet 4 Drive       Hornet 4 Drive 21.4   6 258.0 110 3.08 3.215 19.44  1  0\nHornet Sportabout Hornet Sportabout 18.7   8 360.0 175 3.15 3.440 17.02  0  0\nValiant                     Valiant 18.1   6 225.0 105 2.76 3.460 20.22  1  0\nDuster 360               Duster 360 14.3   8 360.0 245 3.21 3.570 15.84  0  0\nMerc 240D                 Merc 240D 24.4   4 146.7  62 3.69 3.190 20.00  1  0\nMerc 280                   Merc 280 19.2   6 167.6 123 3.92 3.440 18.30  1  0\n                  gear carb\nHornet 4 Drive       3    1\nHornet Sportabout    3    2\nValiant              3    1\nDuster 360           3    4\nMerc 240D            4    2\nMerc 280             4    4\n\n\n\n\n\n\n12.2.0.4 Show all Duplicate\n\n\nCode\n# Get duplicate rows based on the mpg column.\nmtcars_pd[mtcars_pd.duplicated(subset=['mpg'], keep=False)]\n\n\n                  model_name   mpg  cyl   disp  ...   am  gear  carb  new_mpg\nMazda RX4          Mazda RX4  21.0  6.0  160.0  ...  1.0   4.0   4.0     22.0\nMazda RX4 Wag  Mazda RX4 Wag  21.0  6.0  160.0  ...  1.0   4.0   4.0     22.0\nDatsun 710        Datsun 710  22.8  4.0  108.0  ...  1.0   4.0   1.0     23.8\nMerc 230            Merc 230  22.8  4.0  140.8  ...  0.0   4.0   2.0     23.8\n\n[4 rows x 13 columns]\n\n\n\n\n12.2.0.5 keep non Duplicate\n\n\nCode\n# Get non-duplicate rows based on the mpg column.\nmtcars_pd[~mtcars_pd.duplicated(subset=['mpg'], keep=False)]\n\n\n                          model_name   mpg  cyl  ...  gear  carb  new_mpg\nHornet 4 Drive        Hornet 4 Drive  21.4  6.0  ...   3.0   1.0     22.4\nHornet Sportabout  Hornet Sportabout  18.7  8.0  ...   3.0   2.0     19.7\nValiant                      Valiant  18.1  6.0  ...   3.0   1.0     19.1\nDuster 360                Duster 360  14.3  8.0  ...   3.0   4.0     15.3\nMerc 240D                  Merc 240D  24.4  4.0  ...   4.0   2.0     25.4\nMerc 280                    Merc 280  19.2  6.0  ...   4.0   4.0     20.2\n\n[6 rows x 13 columns]\n\n\n\n\n\n\n\nCode\n# Get duplicate rows based on the mpg column.\nmtcars_pl.filter(pl.col(\"mpg\").is_duplicated())\n\n\n\nshape: (4, 12)\n\n\n\nmodel_name\nmpg\ncyl\ndisp\nhp\ndrat\nwt\nqsec\nvs\nam\ngear\ncarb\n\n\nstr\nf64\nf64\nf64\nf64\nf64\nf64\nf64\nf64\nf64\nf64\nf64\n\n\n\n\n\"Mazda RX4\"\n21.0\n6.0\n160.0\n110.0\n3.9\n2.62\n16.46\n0.0\n1.0\n4.0\n4.0\n\n\n\"Mazda RX4 Wag\"\n21.0\n6.0\n160.0\n110.0\n3.9\n2.875\n17.02\n0.0\n1.0\n4.0\n4.0\n\n\n\"Datsun 710\"\n22.8\n4.0\n108.0\n93.0\n3.85\n2.32\n18.61\n1.0\n1.0\n4.0\n1.0\n\n\n\"Merc 230\"\n22.8\n4.0\n140.8\n95.0\n3.92\n3.15\n22.9\n1.0\n0.0\n4.0\n2.0\n\n\n\n\n\n\n\n12.2.0.6 keep non Duplicate\n\n\nCode\n# Get non-duplicate rows based on the mpg column.\nmtcars_pl.filter(pl.col(\"mpg\").is_unique())\n\n\n\nshape: (6, 12)\n\n\n\nmodel_name\nmpg\ncyl\ndisp\nhp\ndrat\nwt\nqsec\nvs\nam\ngear\ncarb\n\n\nstr\nf64\nf64\nf64\nf64\nf64\nf64\nf64\nf64\nf64\nf64\nf64\n\n\n\n\n\"Hornet 4 Drive\"\n21.4\n6.0\n258.0\n110.0\n3.08\n3.215\n19.44\n1.0\n0.0\n3.0\n1.0\n\n\n\"Hornet Sportabout\"\n18.7\n8.0\n360.0\n175.0\n3.15\n3.44\n17.02\n0.0\n0.0\n3.0\n2.0\n\n\n\"Valiant\"\n18.1\n6.0\n225.0\n105.0\n2.76\n3.46\n20.22\n1.0\n0.0\n3.0\n1.0\n\n\n\"Duster 360\"\n14.3\n8.0\n360.0\n245.0\n3.21\n3.57\n15.84\n0.0\n0.0\n3.0\n4.0\n\n\n\"Merc 240D\"\n24.4\n4.0\n146.7\n62.0\n3.69\n3.19\n20.0\n1.0\n0.0\n4.0\n2.0\n\n\n\"Merc 280\"\n19.2\n6.0\n167.6\n123.0\n3.92\n3.44\n18.3\n1.0\n0.0\n4.0\n4.0"
  },
  {
    "objectID": "index.html#left-join",
    "href": "index.html#left-join",
    "title": "SQL handbook",
    "section": "13.1 Left Join",
    "text": "13.1 Left Join\nThis section shows how to perform a left join to combine data from two tables.\n\nSQLRPython pandasPython Polars\n\n\n\n\nCode\n-- Perform a left join between mtcars_table and mtcars_table_group.\nSELECT t1.model_name, t1.mpg, t1.cyl, t2.* FROM mtcars_table t1\nLEFT JOIN mtcars_table_group t2 ON t1.model_name = t2.model_name\nLIMIT 5;\n\n\n\n5 records\n\n\nmodel_name\nmpg\ncyl\nmodel_name\ntotal_mpg\ncyl_mean\n\n\n\n\nMazda RX4\n21.0\n6\nMazda RX4\n21.0\n6\n\n\nMazda RX4 Wag\n21.0\n6\nMazda RX4 Wag\n21.0\n6\n\n\nDatsun 710\n22.8\n4\nDatsun 710\n22.8\n4\n\n\nHornet 4 Drive\n21.4\n6\nHornet 4 Drive\n21.4\n6\n\n\nHornet Sportabout\n18.7\n8\nHornet Sportabout\n18.7\n8\n\n\n\n\n\n\n\n\n\nCode\n# Perform a left join on the mtcars dataframe with itself.\nmtcars |&gt; left_join(mtcars, by = join_by(model_name == model_name)) |&gt; head(5)\n\n\n         model_name mpg.x cyl.x disp.x hp.x drat.x  wt.x qsec.x vs.x am.x\n1         Mazda RX4  21.0     6    160  110   3.90 2.620  16.46    0    1\n2     Mazda RX4 Wag  21.0     6    160  110   3.90 2.875  17.02    0    1\n3        Datsun 710  22.8     4    108   93   3.85 2.320  18.61    1    1\n4    Hornet 4 Drive  21.4     6    258  110   3.08 3.215  19.44    1    0\n5 Hornet Sportabout  18.7     8    360  175   3.15 3.440  17.02    0    0\n  gear.x carb.x mpg.y cyl.y disp.y hp.y drat.y  wt.y qsec.y vs.y am.y gear.y\n1      4      4  21.0     6    160  110   3.90 2.620  16.46    0    1      4\n2      4      4  21.0     6    160  110   3.90 2.875  17.02    0    1      4\n3      4      1  22.8     4    108   93   3.85 2.320  18.61    1    1      4\n4      3      1  21.4     6    258  110   3.08 3.215  19.44    1    0      3\n5      3      2  18.7     8    360  175   3.15 3.440  17.02    0    0      3\n  carb.y\n1      4\n2      4\n3      1\n4      1\n5      2\n\n\n\n\n\n\nCode\n# Perform a left join using pandas.\npd.merge(mtcars_pd, mtcars_pd, left_on='model_name', right_on='model_name', how='left').head(5)\n\n\n          model_name  mpg_x  cyl_x  disp_x  ...  am_y  gear_y  carb_y  new_mpg_y\n0          Mazda RX4   21.0    6.0   160.0  ...   1.0     4.0     4.0       22.0\n1      Mazda RX4 Wag   21.0    6.0   160.0  ...   1.0     4.0     4.0       22.0\n2         Datsun 710   22.8    4.0   108.0  ...   1.0     4.0     1.0       23.8\n3     Hornet 4 Drive   21.4    6.0   258.0  ...   0.0     3.0     1.0       22.4\n4  Hornet Sportabout   18.7    8.0   360.0  ...   0.0     3.0     2.0       19.7\n\n[5 rows x 25 columns]\n\n\n\n\n\n\nCode\nmtcars_pl.join(mtcars_pl, on=\"model_name\", how=\"left\").head(5)\n\n\n\nshape: (5, 23)\n\n\n\nmodel_name\nmpg\ncyl\ndisp\nhp\ndrat\nwt\nqsec\nvs\nam\ngear\ncarb\nmpg_right\ncyl_right\ndisp_right\nhp_right\ndrat_right\nwt_right\nqsec_right\nvs_right\nam_right\ngear_right\ncarb_right\n\n\nstr\nf64\nf64\nf64\nf64\nf64\nf64\nf64\nf64\nf64\nf64\nf64\nf64\nf64\nf64\nf64\nf64\nf64\nf64\nf64\nf64\nf64\nf64\n\n\n\n\n\"Mazda RX4\"\n21.0\n6.0\n160.0\n110.0\n3.9\n2.62\n16.46\n0.0\n1.0\n4.0\n4.0\n21.0\n6.0\n160.0\n110.0\n3.9\n2.62\n16.46\n0.0\n1.0\n4.0\n4.0\n\n\n\"Mazda RX4 Wag\"\n21.0\n6.0\n160.0\n110.0\n3.9\n2.875\n17.02\n0.0\n1.0\n4.0\n4.0\n21.0\n6.0\n160.0\n110.0\n3.9\n2.875\n17.02\n0.0\n1.0\n4.0\n4.0\n\n\n\"Datsun 710\"\n22.8\n4.0\n108.0\n93.0\n3.85\n2.32\n18.61\n1.0\n1.0\n4.0\n1.0\n22.8\n4.0\n108.0\n93.0\n3.85\n2.32\n18.61\n1.0\n1.0\n4.0\n1.0\n\n\n\"Hornet 4 Drive\"\n21.4\n6.0\n258.0\n110.0\n3.08\n3.215\n19.44\n1.0\n0.0\n3.0\n1.0\n21.4\n6.0\n258.0\n110.0\n3.08\n3.215\n19.44\n1.0\n0.0\n3.0\n1.0\n\n\n\"Hornet Sportabout\"\n18.7\n8.0\n360.0\n175.0\n3.15\n3.44\n17.02\n0.0\n0.0\n3.0\n2.0\n18.7\n8.0\n360.0\n175.0\n3.15\n3.44\n17.02\n0.0\n0.0\n3.0\n2.0"
  },
  {
    "objectID": "index.html#inner-join",
    "href": "index.html#inner-join",
    "title": "SQL handbook",
    "section": "13.2 Inner Join",
    "text": "13.2 Inner Join\nThis section demonstrates how to perform an inner join.\n\nSQLRPython pandasPython Polars\n\n\n\n\nCode\n-- Perform an inner join with a subquery.\nSELECT t1.model_name, t1.mpg, t1.cyl, t2.* FROM mtcars_table t1\nINNER JOIN (SELECT * FROM mtcars_table_group LIMIT 5) t2 ON t1.model_name = t2.model_name;\n\n\n\n5 records\n\n\nmodel_name\nmpg\ncyl\nmodel_name\ntotal_mpg\ncyl_mean\n\n\n\n\nMazda RX4\n21.0\n6\nMazda RX4\n21.0\n6\n\n\nDatsun 710\n22.8\n4\nDatsun 710\n22.8\n4\n\n\nValiant\n18.1\n6\nValiant\n18.1\n6\n\n\nDuster 360\n14.3\n8\nDuster 360\n14.3\n8\n\n\nMerc 230\n22.8\n4\nMerc 230\n22.8\n4\n\n\n\n\n\n\n\n\n\nCode\n# Perform an inner join.\nmtcars |&gt; inner_join(mtcars, by = join_by(model_name == model_name)) |&gt; head(5)\n\n\n         model_name mpg.x cyl.x disp.x hp.x drat.x  wt.x qsec.x vs.x am.x\n1         Mazda RX4  21.0     6    160  110   3.90 2.620  16.46    0    1\n2     Mazda RX4 Wag  21.0     6    160  110   3.90 2.875  17.02    0    1\n3        Datsun 710  22.8     4    108   93   3.85 2.320  18.61    1    1\n4    Hornet 4 Drive  21.4     6    258  110   3.08 3.215  19.44    1    0\n5 Hornet Sportabout  18.7     8    360  175   3.15 3.440  17.02    0    0\n  gear.x carb.x mpg.y cyl.y disp.y hp.y drat.y  wt.y qsec.y vs.y am.y gear.y\n1      4      4  21.0     6    160  110   3.90 2.620  16.46    0    1      4\n2      4      4  21.0     6    160  110   3.90 2.875  17.02    0    1      4\n3      4      1  22.8     4    108   93   3.85 2.320  18.61    1    1      4\n4      3      1  21.4     6    258  110   3.08 3.215  19.44    1    0      3\n5      3      2  18.7     8    360  175   3.15 3.440  17.02    0    0      3\n  carb.y\n1      4\n2      4\n3      1\n4      1\n5      2\n\n\n\n\n\n\nCode\n# Perform an inner join with pandas.\npd.merge(mtcars_pd, mtcars_pd, left_on='model_name', right_on='model_name', how='inner').head(5)\n\n\n          model_name  mpg_x  cyl_x  disp_x  ...  am_y  gear_y  carb_y  new_mpg_y\n0          Mazda RX4   21.0    6.0   160.0  ...   1.0     4.0     4.0       22.0\n1      Mazda RX4 Wag   21.0    6.0   160.0  ...   1.0     4.0     4.0       22.0\n2         Datsun 710   22.8    4.0   108.0  ...   1.0     4.0     1.0       23.8\n3     Hornet 4 Drive   21.4    6.0   258.0  ...   0.0     3.0     1.0       22.4\n4  Hornet Sportabout   18.7    8.0   360.0  ...   0.0     3.0     2.0       19.7\n\n[5 rows x 25 columns]\n\n\n\n\n\n\nCode\nmtcars_pl.join(mtcars_pl, on=\"model_name\", how=\"inner\").head(5)\n\n\n\nshape: (5, 23)\n\n\n\nmodel_name\nmpg\ncyl\ndisp\nhp\ndrat\nwt\nqsec\nvs\nam\ngear\ncarb\nmpg_right\ncyl_right\ndisp_right\nhp_right\ndrat_right\nwt_right\nqsec_right\nvs_right\nam_right\ngear_right\ncarb_right\n\n\nstr\nf64\nf64\nf64\nf64\nf64\nf64\nf64\nf64\nf64\nf64\nf64\nf64\nf64\nf64\nf64\nf64\nf64\nf64\nf64\nf64\nf64\nf64\n\n\n\n\n\"Mazda RX4\"\n21.0\n6.0\n160.0\n110.0\n3.9\n2.62\n16.46\n0.0\n1.0\n4.0\n4.0\n21.0\n6.0\n160.0\n110.0\n3.9\n2.62\n16.46\n0.0\n1.0\n4.0\n4.0\n\n\n\"Mazda RX4 Wag\"\n21.0\n6.0\n160.0\n110.0\n3.9\n2.875\n17.02\n0.0\n1.0\n4.0\n4.0\n21.0\n6.0\n160.0\n110.0\n3.9\n2.875\n17.02\n0.0\n1.0\n4.0\n4.0\n\n\n\"Datsun 710\"\n22.8\n4.0\n108.0\n93.0\n3.85\n2.32\n18.61\n1.0\n1.0\n4.0\n1.0\n22.8\n4.0\n108.0\n93.0\n3.85\n2.32\n18.61\n1.0\n1.0\n4.0\n1.0\n\n\n\"Hornet 4 Drive\"\n21.4\n6.0\n258.0\n110.0\n3.08\n3.215\n19.44\n1.0\n0.0\n3.0\n1.0\n21.4\n6.0\n258.0\n110.0\n3.08\n3.215\n19.44\n1.0\n0.0\n3.0\n1.0\n\n\n\"Hornet Sportabout\"\n18.7\n8.0\n360.0\n175.0\n3.15\n3.44\n17.02\n0.0\n0.0\n3.0\n2.0\n18.7\n8.0\n360.0\n175.0\n3.15\n3.44\n17.02\n0.0\n0.0\n3.0\n2.0"
  },
  {
    "objectID": "index.html#append-without-duplicate-elimination-union-all",
    "href": "index.html#append-without-duplicate-elimination-union-all",
    "title": "SQL handbook",
    "section": "14.1 Append Without Duplicate Elimination (union all)",
    "text": "14.1 Append Without Duplicate Elimination (union all)\nThis section shows how to combine rows from two tables, keeping all duplicates.\n\nSQLRPython pandas\n\n\n\n\nCode\n-- Count the rows in the original table.\nSELECT count(*) FROM mtcars_table;\n\n\n\n1 records\n\n\ncount_star()\n\n\n\n\n10\n\n\n\n\n\n\n\nCode\n-- Create a new table by appending mtcars_table to itself, including duplicates.\nCREATE TEMP TABLE double_mtcars_table AS\nSELECT * FROM mtcars_table\nUNION ALL\nSELECT * FROM mtcars_table;\n\n\n\n\nCode\n-- Count the rows in the new table.\nSELECT count(*) FROM double_mtcars_table;\n\n\n\n1 records\n\n\ncount_star()\n\n\n\n\n20\n\n\n\n\n\n\n\n\n\nCode\n# Append rows using bind_rows.\nmtcars %&gt;% bind_rows(mtcars)\n\n\n                              model_name  mpg cyl  disp  hp drat    wt  qsec vs\nMazda RX4...1                  Mazda RX4 21.0   6 160.0 110 3.90 2.620 16.46  0\nMazda RX4 Wag...2          Mazda RX4 Wag 21.0   6 160.0 110 3.90 2.875 17.02  0\nDatsun 710...3                Datsun 710 22.8   4 108.0  93 3.85 2.320 18.61  1\nHornet 4 Drive...4        Hornet 4 Drive 21.4   6 258.0 110 3.08 3.215 19.44  1\nHornet Sportabout...5  Hornet Sportabout 18.7   8 360.0 175 3.15 3.440 17.02  0\nValiant...6                      Valiant 18.1   6 225.0 105 2.76 3.460 20.22  1\nDuster 360...7                Duster 360 14.3   8 360.0 245 3.21 3.570 15.84  0\nMerc 240D...8                  Merc 240D 24.4   4 146.7  62 3.69 3.190 20.00  1\nMerc 230...9                    Merc 230 22.8   4 140.8  95 3.92 3.150 22.90  1\nMerc 280...10                   Merc 280 19.2   6 167.6 123 3.92 3.440 18.30  1\nMazda RX4...11                 Mazda RX4 21.0   6 160.0 110 3.90 2.620 16.46  0\nMazda RX4 Wag...12         Mazda RX4 Wag 21.0   6 160.0 110 3.90 2.875 17.02  0\nDatsun 710...13               Datsun 710 22.8   4 108.0  93 3.85 2.320 18.61  1\nHornet 4 Drive...14       Hornet 4 Drive 21.4   6 258.0 110 3.08 3.215 19.44  1\nHornet Sportabout...15 Hornet Sportabout 18.7   8 360.0 175 3.15 3.440 17.02  0\nValiant...16                     Valiant 18.1   6 225.0 105 2.76 3.460 20.22  1\nDuster 360...17               Duster 360 14.3   8 360.0 245 3.21 3.570 15.84  0\nMerc 240D...18                 Merc 240D 24.4   4 146.7  62 3.69 3.190 20.00  1\nMerc 230...19                   Merc 230 22.8   4 140.8  95 3.92 3.150 22.90  1\nMerc 280...20                   Merc 280 19.2   6 167.6 123 3.92 3.440 18.30  1\n                       am gear carb\nMazda RX4...1           1    4    4\nMazda RX4 Wag...2       1    4    4\nDatsun 710...3          1    4    1\nHornet 4 Drive...4      0    3    1\nHornet Sportabout...5   0    3    2\nValiant...6             0    3    1\nDuster 360...7          0    3    4\nMerc 240D...8           0    4    2\nMerc 230...9            0    4    2\nMerc 280...10           0    4    4\nMazda RX4...11          1    4    4\nMazda RX4 Wag...12      1    4    4\nDatsun 710...13         1    4    1\nHornet 4 Drive...14     0    3    1\nHornet Sportabout...15  0    3    2\nValiant...16            0    3    1\nDuster 360...17         0    3    4\nMerc 240D...18          0    4    2\nMerc 230...19           0    4    2\nMerc 280...20           0    4    4\n\n\n\n\n\n\nCode\n# Concatenate dataframes, keeping all rows.\npd.concat([mtcars_pd, mtcars_pd], ignore_index=True)\n\n\n           model_name   mpg  cyl   disp     hp  ...   vs   am  gear  carb  new_mpg\n0           Mazda RX4  21.0  6.0  160.0  110.0  ...  0.0  1.0   4.0   4.0     22.0\n1       Mazda RX4 Wag  21.0  6.0  160.0  110.0  ...  0.0  1.0   4.0   4.0     22.0\n2          Datsun 710  22.8  4.0  108.0   93.0  ...  1.0  1.0   4.0   1.0     23.8\n3      Hornet 4 Drive  21.4  6.0  258.0  110.0  ...  1.0  0.0   3.0   1.0     22.4\n4   Hornet Sportabout  18.7  8.0  360.0  175.0  ...  0.0  0.0   3.0   2.0     19.7\n5             Valiant  18.1  6.0  225.0  105.0  ...  1.0  0.0   3.0   1.0     19.1\n6          Duster 360  14.3  8.0  360.0  245.0  ...  0.0  0.0   3.0   4.0     15.3\n7           Merc 240D  24.4  4.0  146.7   62.0  ...  1.0  0.0   4.0   2.0     25.4\n8            Merc 230  22.8  4.0  140.8   95.0  ...  1.0  0.0   4.0   2.0     23.8\n9            Merc 280  19.2  6.0  167.6  123.0  ...  1.0  0.0   4.0   4.0     20.2\n10          Mazda RX4  21.0  6.0  160.0  110.0  ...  0.0  1.0   4.0   4.0     22.0\n11      Mazda RX4 Wag  21.0  6.0  160.0  110.0  ...  0.0  1.0   4.0   4.0     22.0\n12         Datsun 710  22.8  4.0  108.0   93.0  ...  1.0  1.0   4.0   1.0     23.8\n13     Hornet 4 Drive  21.4  6.0  258.0  110.0  ...  1.0  0.0   3.0   1.0     22.4\n14  Hornet Sportabout  18.7  8.0  360.0  175.0  ...  0.0  0.0   3.0   2.0     19.7\n15            Valiant  18.1  6.0  225.0  105.0  ...  1.0  0.0   3.0   1.0     19.1\n16         Duster 360  14.3  8.0  360.0  245.0  ...  0.0  0.0   3.0   4.0     15.3\n17          Merc 240D  24.4  4.0  146.7   62.0  ...  1.0  0.0   4.0   2.0     25.4\n18           Merc 230  22.8  4.0  140.8   95.0  ...  1.0  0.0   4.0   2.0     23.8\n19           Merc 280  19.2  6.0  167.6  123.0  ...  1.0  0.0   4.0   4.0     20.2\n\n[20 rows x 13 columns]"
  },
  {
    "objectID": "index.html#append-with-duplicate-elimination-union",
    "href": "index.html#append-with-duplicate-elimination-union",
    "title": "SQL handbook",
    "section": "14.2 Append With Duplicate Elimination (union)",
    "text": "14.2 Append With Duplicate Elimination (union)\nThis section demonstrates how to combine rows while removing duplicate entries.\n\nSQLRPython pandas\n\n\n\n\nCode\n-- Create a table, removing duplicate rows.\nCREATE OR REPLACE TEMP TABLE double_mtcars_table AS\nSELECT * FROM mtcars_table\nUNION\nSELECT * FROM mtcars_table;\n\n\n\n\nCode\n-- Count the rows in the new table.\nSELECT count(*) FROM double_mtcars_table;\n\n\n\n1 records\n\n\ncount_star()\n\n\n\n\n10\n\n\n\n\n\n\n\nCode\n-- Verify the count of distinct rows.\nSELECT count(*) FROM (\n  SELECT DISTINCT * FROM double_mtcars_table\n);\n\n\n\n1 records\n\n\ncount_star()\n\n\n\n\n10\n\n\n\n\n\n\n\n\n\nCode\n# Append rows and then remove duplicates.\nmtcars %&gt;% bind_rows(mtcars) |&gt; distinct()\n\n\n                         model_name  mpg cyl  disp  hp drat    wt  qsec vs am\nMazda RX4                 Mazda RX4 21.0   6 160.0 110 3.90 2.620 16.46  0  1\nMazda RX4 Wag         Mazda RX4 Wag 21.0   6 160.0 110 3.90 2.875 17.02  0  1\nDatsun 710               Datsun 710 22.8   4 108.0  93 3.85 2.320 18.61  1  1\nHornet 4 Drive       Hornet 4 Drive 21.4   6 258.0 110 3.08 3.215 19.44  1  0\nHornet Sportabout Hornet Sportabout 18.7   8 360.0 175 3.15 3.440 17.02  0  0\nValiant                     Valiant 18.1   6 225.0 105 2.76 3.460 20.22  1  0\nDuster 360               Duster 360 14.3   8 360.0 245 3.21 3.570 15.84  0  0\nMerc 240D                 Merc 240D 24.4   4 146.7  62 3.69 3.190 20.00  1  0\nMerc 230                   Merc 230 22.8   4 140.8  95 3.92 3.150 22.90  1  0\nMerc 280                   Merc 280 19.2   6 167.6 123 3.92 3.440 18.30  1  0\n                  gear carb\nMazda RX4            4    4\nMazda RX4 Wag        4    4\nDatsun 710           4    1\nHornet 4 Drive       3    1\nHornet Sportabout    3    2\nValiant              3    1\nDuster 360           3    4\nMerc 240D            4    2\nMerc 230             4    2\nMerc 280             4    4\n\n\n\n\n\n\nCode\n# Concatenate dataframes and then drop duplicates.\npd.concat([mtcars_pd, mtcars_pd], ignore_index=True).drop_duplicates()\n\n\n          model_name   mpg  cyl   disp     hp  ...   vs   am  gear  carb  new_mpg\n0          Mazda RX4  21.0  6.0  160.0  110.0  ...  0.0  1.0   4.0   4.0     22.0\n1      Mazda RX4 Wag  21.0  6.0  160.0  110.0  ...  0.0  1.0   4.0   4.0     22.0\n2         Datsun 710  22.8  4.0  108.0   93.0  ...  1.0  1.0   4.0   1.0     23.8\n3     Hornet 4 Drive  21.4  6.0  258.0  110.0  ...  1.0  0.0   3.0   1.0     22.4\n4  Hornet Sportabout  18.7  8.0  360.0  175.0  ...  0.0  0.0   3.0   2.0     19.7\n5            Valiant  18.1  6.0  225.0  105.0  ...  1.0  0.0   3.0   1.0     19.1\n6         Duster 360  14.3  8.0  360.0  245.0  ...  0.0  0.0   3.0   4.0     15.3\n7          Merc 240D  24.4  4.0  146.7   62.0  ...  1.0  0.0   4.0   2.0     25.4\n8           Merc 230  22.8  4.0  140.8   95.0  ...  1.0  0.0   4.0   2.0     23.8\n9           Merc 280  19.2  6.0  167.6  123.0  ...  1.0  0.0   4.0   4.0     20.2\n\n[10 rows x 13 columns]"
  },
  {
    "objectID": "index.html#pivot-on-one-column",
    "href": "index.html#pivot-on-one-column",
    "title": "SQL handbook",
    "section": "18.1 PIVOT on One Column",
    "text": "18.1 PIVOT on One Column\n\nSQLPython pandasPython Polars\n\n\n\n\nCode\n-- Pivot the table on the 'year' column.\nPIVOT cities\nON year\nUSING sum(population)\nGROUP BY country;\n\n\n\n2 records\n\n\ncountry\n2000\n2010\n2020\n\n\n\n\nUS\n8579\n8783\n9510\n\n\nNL\n1005\n1065\n1158\n\n\n\n\n\n\n\n\n\nCode\ncities_pd.pivot_table(index='country', columns='year', values='population', aggfunc='sum').reset_index()\n\n\nyear country  2000  2010  2020\n0         NL  1005  1065  1158\n1         US  8579  8783  9510\n\n\n\n\n\n\nCode\ncities_pl.pivot(index='country', columns='year', values='population', aggregate_function='sum')\n\n\n\nshape: (2, 4)\n\n\n\ncountry\n2000\n2010\n2020\n\n\nstr\ni64\ni64\ni64\n\n\n\n\n\"NL\"\n1005\n1065\n1158\n\n\n\"US\"\n8579\n8783\n9510"
  },
  {
    "objectID": "index.html#pivot-on-two-columns",
    "href": "index.html#pivot-on-two-columns",
    "title": "SQL handbook",
    "section": "18.2 PIVOT on Two Columns",
    "text": "18.2 PIVOT on Two Columns\n\nSQLPython pandasPython Polars\n\n\n\n\nCode\n-- Pivot on both 'country' and 'name'.\nPIVOT cities\nON country, name\nUSING sum(population);\n\n\n\n3 records\n\n\n\n\n\n\n\n\n\n\n\nyear\nNL_Amsterdam\nNL_New York City\nNL_Seattle\nUS_Amsterdam\nUS_New York City\nUS_Seattle\n\n\n\n\n2000\n1005\nNA\nNA\nNA\n8015\n564\n\n\n2010\n1065\nNA\nNA\nNA\n8175\n608\n\n\n2020\n1158\nNA\nNA\nNA\n8772\n738\n\n\n\n\n\n\n\n\n\nCode\ncities_pd.pivot_table(index=['country', 'name'], columns='year', values='population', aggfunc='sum').reset_index()\n\n\nyear country           name  2000  2010  2020\n0         NL      Amsterdam  1005  1065  1158\n1         US  New York City  8015  8175  8772\n2         US        Seattle   564   608   738\n\n\n\n\n\n\nCode\ncities_pl.pivot(index=['country', 'name'], columns='year', values='population', aggregate_function='sum')\n\n\n\nshape: (3, 5)\n\n\n\ncountry\nname\n2000\n2010\n2020\n\n\nstr\nstr\ni64\ni64\ni64\n\n\n\n\n\"NL\"\n\"Amsterdam\"\n1005\n1065\n1158\n\n\n\"US\"\n\"Seattle\"\n564\n608\n738\n\n\n\"US\"\n\"New York City\"\n8015\n8175\n8772"
  }
]